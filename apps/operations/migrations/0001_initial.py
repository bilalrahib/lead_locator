# Generated by Django 4.2.21 on 2025-06-10 19:10

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ManagedLocation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "location_name",
                    models.CharField(
                        help_text="Name of the business/location", max_length=200
                    ),
                ),
                (
                    "address_details",
                    models.TextField(
                        help_text="Full address including street, city, state, zip"
                    ),
                ),
                (
                    "contact_person",
                    models.CharField(
                        blank=True,
                        help_text="Primary contact person at location",
                        max_length=100,
                    ),
                ),
                (
                    "contact_phone",
                    models.CharField(
                        blank=True, help_text="Contact phone number", max_length=20
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True, help_text="Contact email address", max_length=254
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Photo of the location",
                        null=True,
                        upload_to="managed_locations/",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the location"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this location is currently active",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="Latitude coordinate",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="Longitude coordinate",
                        max_digits=11,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="managed_locations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Managed Location",
                "verbose_name_plural": "Managed Locations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PlacedMachine",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "machine_type",
                    models.CharField(
                        choices=[
                            ("snack", "Snack Machine"),
                            ("drink", "Drink Machine"),
                            ("claw", "Claw Machine"),
                            ("hot_food", "Hot Food Kiosk"),
                            ("ice_cream", "Ice Cream Machine"),
                            ("coffee", "Coffee Machine"),
                            ("combo", "Combo Machine"),
                            ("arcade", "Arcade Game"),
                            ("other", "Other"),
                        ],
                        help_text="Type of vending machine",
                        max_length=20,
                    ),
                ),
                (
                    "machine_identifier",
                    models.CharField(
                        blank=True,
                        help_text="Serial number or custom identifier",
                        max_length=100,
                    ),
                ),
                (
                    "date_placed",
                    models.DateField(help_text="Date when machine was placed"),
                ),
                (
                    "commission_percentage_to_location",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Percentage of revenue paid to location (0-100%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "vend_price_range",
                    models.CharField(
                        help_text="Price range of items (e.g., '$1.00-$2.50')",
                        max_length=50,
                    ),
                ),
                (
                    "cost_per_vend",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Average cost per vend/play",
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Photo of the machine",
                        null=True,
                        upload_to="placed_machines/",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this machine is currently active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the machine"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "managed_location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="placed_machines",
                        to="operations.managedlocation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Placed Machine",
                "verbose_name_plural": "Placed Machines",
                "ordering": ["-date_placed"],
            },
        ),
        migrations.CreateModel(
            name="VisitLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "visit_date",
                    models.DateTimeField(help_text="Date and time of visit"),
                ),
                (
                    "visit_type",
                    models.CharField(
                        choices=[
                            ("collection", "Collection"),
                            ("maintenance", "Maintenance"),
                            ("restock", "Restock"),
                            ("inspection", "Inspection"),
                            ("removal", "Removal"),
                            ("other", "Other"),
                        ],
                        default="collection",
                        help_text="Type of visit",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Notes about the visit"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "placed_machine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="visit_logs",
                        to="operations.placedmachine",
                    ),
                ),
            ],
            options={
                "verbose_name": "Visit Log",
                "verbose_name_plural": "Visit Logs",
                "ordering": ["-visit_date"],
            },
        ),
        migrations.CreateModel(
            name="CollectionData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "cash_collected",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount of cash collected",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "items_sold_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated value of items sold (optional)",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "commission_paid_to_location",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Commission paid to location owner",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "restock_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Cost of restocking items",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "maintenance_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Cost of maintenance during visit",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "restock_notes",
                    models.TextField(blank=True, help_text="Notes about restocking"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "visit_log",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collection_data",
                        to="operations.visitlog",
                    ),
                ),
            ],
            options={
                "verbose_name": "Collection Data",
                "verbose_name_plural": "Collection Data",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="visitlog",
            index=models.Index(
                fields=["placed_machine", "visit_date"],
                name="operations__placed__84eac9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="visitlog",
            index=models.Index(
                fields=["visit_type"], name="operations__visit_t_a11521_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="visitlog",
            index=models.Index(
                fields=["visit_date"], name="operations__visit_d_94701b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="placedmachine",
            index=models.Index(
                fields=["managed_location", "is_active"],
                name="operations__managed_54b06e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="placedmachine",
            index=models.Index(
                fields=["machine_type"], name="operations__machine_a8df74_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="placedmachine",
            index=models.Index(
                fields=["date_placed"], name="operations__date_pl_db99ce_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="managedlocation",
            index=models.Index(
                fields=["user", "is_active"], name="operations__user_id_5bc95b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="managedlocation",
            index=models.Index(
                fields=["created_at"], name="operations__created_45945e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="managedlocation",
            index=models.Index(
                fields=["location_name"], name="operations__locatio_979a0e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="collectiondata",
            index=models.Index(
                fields=["visit_log"], name="operations__visit_l_1166a6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="collectiondata",
            index=models.Index(
                fields=["cash_collected"], name="operations__cash_co_9f2c5e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="collectiondata",
            index=models.Index(
                fields=["created_at"], name="operations__created_27d281_idx"
            ),
        ),
    ]
